#!/usr/bin/env bash
#
#: Title        : uncompress_image_file.sh
#: Date         : 07-Mar-2019
#: Author       : "Harsha Vardhan J" <vardhanharshaj@gmail.com>
#: Version      : 0.1
#: Description  : This script checks if the image file is compressed.
#                 If it is, the file uncompressed and the extracted
#                 file(its absolute path) is returned as output.
#                
#: Options      : Requires a file as an argument.
#: Usage		: Call the script with a file as an argument
#                   ./uncompress_image_file.sh ../relative/file/path
#                   ./uncompress_image_file.sh /absolute/file/path
################


# Importing the 'get_image_file.sh' script.
# The 'get_image_file__file_signature_check_method' function
# is required in this script.
source ./get_image_file.sh


# Function that uncompresses image file if it's compressed
# Function input  : /path/to/compressed/file
# Function output : /absolute/path/to/image/file
#
function uncompress_image_file() {

	# Variable to store absolute path of compressed file
	local compressedFile

	# If number of arguments = 1
	if [[ $# -eq 1 ]] ; then
		# If the file is non-zero in size, and is readable by the \
		# user that the script is running as
		if [[ -s "$1" && -r "$1" ]] ; then
			# Call the function that checks if the input file is compressed,
			# and add the output to the 'compressedFile' variable
			compressedFile="$(uncompress_image_file__compression_check "$1")"

			# If the exit code of the previous command(the 'compression_check' function)
			# not 1, that is if the command is successful
			if [[ $? -ne 1 ]] ; then

				# Calling function that picks the appropriate command to uncompress/extract
				# the compressed file based on the compression/archive type
				################# Uncompression Function #####################
			
			fi
    # If the file doesn't exist, or is of size zero, or is unreadable by the user which
    # the script is running as
		else
      printf '%s\n' "File \"$1\" either does not exist, is of zero-size,\
        or is unreadable by the user \"$(whoami)\"." \
        && return 1
		fi
	# If number of arguments is not equal to 1
	else
		printf '%s\n' "Received $# arguments. Requires only 1." \
			&& return 1
	fi

}


# Function that checks if the image file is compressed
# Function input  : /path/to/file
# Function output : /absolute/path/to/file
function uncompress_image_file__compression_check() {
	# Compression file types to match
	# file types are generated by running
	# `file /path/to/file`
	local -a compressionTypeArray

	# Compression type of input file
	local compressionType


	# Obtained file types from the '/usr/share/file/magic.mgc'
	# file. It needs to be viewed using the 'strings' command.
	compressionTypeArray=("gzip compressed" "bzip2 compressed" \
							"GNU tar archive" "RAR archive data" \
							"Zip archive data" "7-zip archive data")
	
	# If number of arguments = 1
	if [[ $# -eq 1 ]] ; then
		# If the file is non-zero in size, and is readable by the
		# user that the script is running as
		if [[ -s "$1" && -r "$1" ]] ; then
			# Calling function to get the file's signature and setting the result to
			# the 'compressionType' variable
			compressionType="$(get_image_file__file_signature_check_method "$1")"

			# If the exit code of the previous command is not 1,
			# that is, if the function responsible for obtaining
			# the file type was successful
			if [[ $? -ne 1 ]] ; then
				# For a list of all compression types listed in the
				# 'compressionTypeArray' array
				for Variable in "${compressionTypeArray[@]}" ; do
					# If the 'compressionType' value matches any of the
					# values in the 'compressionTypeArray' array
					if [[ "${compressionType}" =~ "${Variable}" ]] ; then
						# Print resolved symlinks or canonicalised file names \
						# as per 'readlink' manpage
						readlink -f "$1" \
							&& break
					else
						return 1
					fi
				done
			fi
		# If the file doesn't exist, or is of zero size, or is unreadable by the user
		# that the script is running as
		else
			printf '%s\n' "File \"$1\" either does not exist, is of zero-size,\
			or is unreadable by the user \"$(whoami)\"." \
				&& return 1
		fi
	# If number of arguments is not equal to 1
	else
		printf '%s\n' "$# arguments have been provided. Requires only 1." \
			&& return 1
	fi

}
